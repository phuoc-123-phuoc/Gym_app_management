#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef KOMMUNICATE_SWIFT_H
#define KOMMUNICATE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import KommunicateChatUI_iOS_SDK;
@import KommunicateCore_iOS_SDK;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Kommunicate",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)






@class NSCoder;
@class NSString;
@class NSBundle;

SWIFT_CLASS("_TtC11Kommunicate31CustomPreChatFormViewController")
@interface CustomPreChatFormViewController : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UITextField;

@interface CustomPreChatFormViewController (SWIFT_EXTENSION(Kommunicate)) <UITextFieldDelegate>
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface CustomPreChatFormViewController (SWIFT_EXTENSION(Kommunicate)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)_ didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC11Kommunicate17FaqViewController")
@interface FaqViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKWebView;
@class WKNavigationAction;

@interface FaqViewController (SWIFT_EXTENSION(Kommunicate)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
@end


/// KMConversation is used for creating conversation
SWIFT_CLASS("_TtC11Kommunicate14KMConversation")
@interface KMConversation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// KMConversationBuilder is used for building KMConversation object
SWIFT_CLASS("_TtC11Kommunicate21KMConversationBuilder")
@interface KMConversationBuilder : NSObject
/// If you want to associate this conversation with a unique ID, then pass clientConversationId. If you pass clientConversationId then useLastConversation needs to be false.
/// \param clientConversationId Pass your clientConversationId, If you want to create conversation with your own clientConversationId
///
- (KMConversationBuilder * _Nonnull)withClientConversationId:(NSString * _Nullable)clientConversationId;
/// If you have want to add agents in converastion and if you have agentIds then pass.
/// \param agentIds Pass agentIds, if you any  agentIds
///
- (KMConversationBuilder * _Nonnull)withAgentIds:(NSArray<NSString *> * _Nonnull)agentIds;
/// If you have bot ids that you  want to be in  a converastion then you can  set your withBotIds.
/// \param botIds Pass botIds, If you have want to add the bots in conversations
///
- (KMConversationBuilder * _Nonnull)withBotIds:(NSArray<NSString *> * _Nonnull)botIds;
/// If you pass this value true then it will skip routing rules set from conversation rules section in kommunicate dashboard.
/// \param skipRouting By default it will be false, If you want skip routing then pass  true.
///
- (KMConversationBuilder * _Nonnull)skipRouting:(BOOL)skipRouting;
/// If you pass useLastConversation as false, then a new conversation will be created everytime. If you pass useLastConversation as true, then it will use old conversation which is already created with this data.
/// \param useLastConversation Pass  useLastConversation
///
- (KMConversationBuilder * _Nonnull)useLastConversation:(BOOL)useLastConversation;
/// If you want to show  the custom conversation title in chat screen then pass your title in withConversationTitle
/// \param conversationTitle Pass custom conversation Title
///
- (KMConversationBuilder * _Nonnull)withConversationTitle:(NSString * _Nonnull)conversationTitle;
/// If you want to pass extra data in the conversation then use the withMetaData to set the information
/// \param conversationMetadata Pass  conversationMetadata
///
- (KMConversationBuilder * _Nonnull)withMetaData:(NSDictionary * _Nonnull)conversationMetadata;
/// If conversationTitle is set then by default isUseOriginalTitle will be true.
/// \param isUseOriginalTitle isUseOriginalTitle
///
- (KMConversationBuilder * _Nonnull)useOriginalTitle:(BOOL)isUseOriginalTitle;
/// To set the conversation assignee, pass Agent ID or Bot Id.
/// \param conversationAssignee Pass AgentId or botId
///
- (KMConversationBuilder * _Nonnull)withConversationAssignee:(NSString * _Nonnull)conversationAssignee;
/// To set default conversation assignee, pass Agent ID or Bot Id.
/// \param defaultConversationAssignee Pass AgentId or botId
///
- (KMConversationBuilder * _Nonnull)withDefaultConversationAssignee:(NSString * _Nonnull)defaultConversationAssignee;
/// To assign the conversation to a team, pass a team Id.
/// \param teamId Pass a team ID
///
- (KMConversationBuilder * _Nonnull)withTeamId:(NSString * _Nonnull)teamId;
/// Finally call the build method on the KMConversationBuilder to build the KMConversation
- (KMConversation * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11Kommunicate32KMConversationListViewController")
@interface KMConversationListViewController : ALKBaseViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@end

@class NSMutableArray;

@interface KMConversationListViewController (SWIFT_EXTENSION(Kommunicate)) <ALMessagesDelegate>
- (void)getMessagesArray:(NSMutableArray * _Null_unspecified)messagesArray;
- (void)updateMessageList:(NSMutableArray * _Null_unspecified)messagesArray;
@end


@class UISearchBar;

@interface KMConversationListViewController (SWIFT_EXTENSION(Kommunicate)) <UISearchBarDelegate>
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)searchBar:(UISearchBar * _Nonnull)_ textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)_;
@end


@class ALMessage;
@class ALUserDetail;

@interface KMConversationListViewController (SWIFT_EXTENSION(Kommunicate)) <ALMQTTConversationDelegate>
- (void)mqttDidConnected;
- (void)userOnlineStatusChanged:(NSString * _Null_unspecified)contactId status:(NSString * _Null_unspecified)status;
- (void)updateUserDetail:(NSString * _Null_unspecified)userId;
- (void)syncCall:(ALMessage * _Null_unspecified)alMessage andMessageList:(NSMutableArray * _Null_unspecified)_;
- (void)delivered:(NSString * _Null_unspecified)messageKey contactId:(NSString * _Null_unspecified)contactId withStatus:(int32_t)status;
- (void)updateStatusForContact:(NSString * _Null_unspecified)contactId withStatus:(int32_t)status;
- (void)updateTypingStatus:(NSString * _Null_unspecified)_ userId:(NSString * _Null_unspecified)userId status:(BOOL)status;
- (void)reloadDataForUserBlockNotification:(NSString * _Null_unspecified)userId andBlockFlag:(BOOL)_;
- (void)updateLastSeenAtStatus:(ALUserDetail * _Null_unspecified)alUserDetail;
- (void)mqttConnectionClosed;
@end

@class NSNotification;

/// Before pushing this view Controller. Use this
/// navigationItem.backBarButtonItem = UIBarButtonItem(customView: UIView())
SWIFT_CLASS("_TtC11Kommunicate28KMConversationViewController")
@interface KMConversationViewController : ALKConversationViewController
- (void)viewWillAppear:(BOOL)animated;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)animated;
- (void)newMessagesAdded;
- (void)pushNotificationWithNotification:(NSNotification * _Nonnull)notification;
- (void)loadingFinishedWithError:(NSError * _Nullable)_;
- (void)showFeedback;
@end






SWIFT_CLASS("_TtC11Kommunicate11KMGroupUser")
@interface KMGroupUser : ALGroupUser
- (null_unspecified instancetype)initWithDictonary:(NSDictionary * _Null_unspecified)messageDictonary OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithJSONString:(NSString * _Null_unspecified)JSONString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11Kommunicate9KMMessage")
@interface KMMessage : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11Kommunicate16KMMessageBuilder")
@interface KMMessageBuilder : NSObject
- (KMMessageBuilder * _Nonnull)withConversationId:(NSString * _Nonnull)conversationId;
- (KMMessageBuilder * _Nonnull)withText:(NSString * _Nonnull)text;
- (KMMessageBuilder * _Nonnull)withMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
- (KMMessage * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11Kommunicate27KMPreChatFormViewController")
@interface KMPreChatFormViewController : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface KMPreChatFormViewController (SWIFT_EXTENSION(Kommunicate)) <UITextFieldDelegate>
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@class ALUser;
@class ALRegistrationResponse;
@class NSError;
@class UIView;

SWIFT_CLASS("_TtC11Kommunicate11Kommunicate")
@interface Kommunicate : NSObject
/// Returns true if user is already logged in.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLoggedIn;)
+ (BOOL)isLoggedIn SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Setup an App ID. It will be used for all Kommunicate related requests.
/// note:
/// If the App ID is modified then make sure to log out and log in.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     applicationId: App ID that needs to be set up.
///   </li>
/// </ul>
+ (void)setupWithApplicationId:(NSString * _Nonnull)applicationId;
/// Registers a new user, if it’s already registered then user will be logged in.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     kmUser: A KMUser object which contains user details.
///   </li>
///   <li>
///     completion: The callback with registration response and error.
///   </li>
/// </ul>
+ (void)registerUser:(ALUser * _Nonnull)kmUser completion:(void (^ _Nonnull)(ALRegistrationResponse * _Nullable, NSError * _Nullable))completion;
+ (void)registerUserAsVistor:(ALUser * _Nonnull)kmUser completion:(void (^ _Nonnull)(ALRegistrationResponse * _Nullable, NSError * _Nullable))completion;
+ (ALUser * _Nonnull)createVisitorUser SWIFT_WARN_UNUSED_RESULT;
/// This method is used to return an instance of conversation list view controller.
///
/// returns:
/// Instance of <code>ALKConversationListViewController</code>
+ (KMConversationListViewController * _Nonnull)conversationListViewController SWIFT_WARN_UNUSED_RESULT;
/// Launch chat list from a ViewController.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: ViewController from which the chat list will be launched.
///   </li>
/// </ul>
+ (void)showConversationsFrom:(UIViewController * _Nonnull)viewController;
/// Launch chat list inside a container..
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: ViewController from which the chat list  will be added as child vc
///   </li>
///   <li>
///     rootView: view container where chat will be loaded.
///   </li>
/// </ul>
+ (void)embedConversationListFrom:(UIViewController * _Nonnull)viewController on:(UIView * _Nonnull)rootView;
/// Close the Conversation Screen
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: ViewController from where ConversationVC  presented
///   </li>
/// </ul>
+ (void)closeConversationVCFrom:(UIViewController * _Nonnull)viewController;
/// Launch group chat from a ViewController
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     clientGroupId: clientChannelKey of the Group.
///   </li>
///   <li>
///     viewController: ViewController from which the group chat will be launched.
///   </li>
///   <li>
///     prefilledMessage: Prefilled message for chatbox.
///   </li>
///   <li>
///     showListOnBack: If true, then the conversation list will be shown on tap of the back button,
///   </li>
///   <li>
///     completionHandler: Called with the information whether the conversation was
///     shown or not.
///   </li>
/// </ul>
+ (void)showConversationWithGroupId:(NSString * _Nonnull)clientGroupId from:(UIViewController * _Nonnull)viewController prefilledMessage:(NSString * _Nullable)prefilledMessage showListOnBack:(BOOL)showListOnBack completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Launch group chat in a container
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     rootView: UIView in which Conversation needs to be loaded
///   </li>
///   <li>
///     clientGroupId: clientChannelKey of the Group.
///   </li>
///   <li>
///     viewController: ViewController from which the group chat will be launched.
///   </li>
///   <li>
///     prefilledMessage: Prefilled message for chatbox.
///   </li>
///   <li>
///     showListOnBack: If true, then the conversation list will be shown on tap of the back button,
///   </li>
///   <li>
///     completionHandler: Called with the information whether the conversation was
///     shown or not.
///   </li>
/// </ul>
+ (void)showConversationInRootView:(UIView * _Nonnull)rootView groupId:(NSString * _Nonnull)clientGroupId from:(UIViewController * _Nonnull)viewController prefilledMessage:(NSString * _Nullable)prefilledMessage showListOnBack:(BOOL)showListOnBack completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Generates a random id that can be used as an <code>userId</code>
/// when you don’t have any user information that can be used as an
/// userId.
///
/// returns:
/// A random alphanumeric string of length 32.
+ (NSString * _Nonnull)randomId SWIFT_WARN_UNUSED_RESULT;
/// Fetches appsettings configuration and get the disable chat widget config.
/// \param completion returns disablechatwidget configuration value
///
+ (void)isChatWidgetDisabledWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Logs out the current logged in user and clears all the cache.
+ (void)logoutUser SWIFT_DEPRECATED_MSG("Use logoutUser(completion:)");
/// Creates a new conversation with the details passed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: User id of the participant.
///   </li>
///   <li>
///     agentId: User id of the agent.
///   </li>
///   <li>
///     botIds: A list of bot ids to be added in the conversation.
///   </li>
///   <li>
///     useLastConversation: If there is a conversation already present then that will be returned.
///   </li>
/// </ul>
///
/// returns:
/// Group id if successful otherwise nil.
+ (void)createConversationWithUserId:(NSString * _Nonnull)_ agentIds:(NSArray<NSString *> * _Nonnull)agentIds botIds:(NSArray<NSString *> * _Nullable)botIds useLastConversation:(BOOL)useLastConversation clientConversationId:(NSString * _Nullable)_ completion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("Use createConversation(conversation:completion:)");
@end
















#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef KOMMUNICATE_SWIFT_H
#define KOMMUNICATE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import KommunicateChatUI_iOS_SDK;
@import KommunicateCore_iOS_SDK;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Kommunicate",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)






@class NSCoder;
@class NSString;
@class NSBundle;

SWIFT_CLASS("_TtC11Kommunicate31CustomPreChatFormViewController")
@interface CustomPreChatFormViewController : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UITextField;

@interface CustomPreChatFormViewController (SWIFT_EXTENSION(Kommunicate)) <UITextFieldDelegate>
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface CustomPreChatFormViewController (SWIFT_EXTENSION(Kommunicate)) <UITableViewDataSource, UITableViewDelegate>
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)_ didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


SWIFT_CLASS("_TtC11Kommunicate17FaqViewController")
@interface FaqViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKWebView;
@class WKNavigationAction;

@interface FaqViewController (SWIFT_EXTENSION(Kommunicate)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
@end


/// KMConversation is used for creating conversation
SWIFT_CLASS("_TtC11Kommunicate14KMConversation")
@interface KMConversation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// KMConversationBuilder is used for building KMConversation object
SWIFT_CLASS("_TtC11Kommunicate21KMConversationBuilder")
@interface KMConversationBuilder : NSObject
/// If you want to associate this conversation with a unique ID, then pass clientConversationId. If you pass clientConversationId then useLastConversation needs to be false.
/// \param clientConversationId Pass your clientConversationId, If you want to create conversation with your own clientConversationId
///
- (KMConversationBuilder * _Nonnull)withClientConversationId:(NSString * _Nullable)clientConversationId;
/// If you have want to add agents in converastion and if you have agentIds then pass.
/// \param agentIds Pass agentIds, if you any  agentIds
///
- (KMConversationBuilder * _Nonnull)withAgentIds:(NSArray<NSString *> * _Nonnull)agentIds;
/// If you have bot ids that you  want to be in  a converastion then you can  set your withBotIds.
/// \param botIds Pass botIds, If you have want to add the bots in conversations
///
- (KMConversationBuilder * _Nonnull)withBotIds:(NSArray<NSString *> * _Nonnull)botIds;
/// If you pass this value true then it will skip routing rules set from conversation rules section in kommunicate dashboard.
/// \param skipRouting By default it will be false, If you want skip routing then pass  true.
///
- (KMConversationBuilder * _Nonnull)skipRouting:(BOOL)skipRouting;
/// If you pass useLastConversation as false, then a new conversation will be created everytime. If you pass useLastConversation as true, then it will use old conversation which is already created with this data.
/// \param useLastConversation Pass  useLastConversation
///
- (KMConversationBuilder * _Nonnull)useLastConversation:(BOOL)useLastConversation;
/// If you want to show  the custom conversation title in chat screen then pass your title in withConversationTitle
/// \param conversationTitle Pass custom conversation Title
///
- (KMConversationBuilder * _Nonnull)withConversationTitle:(NSString * _Nonnull)conversationTitle;
/// If you want to pass extra data in the conversation then use the withMetaData to set the information
/// \param conversationMetadata Pass  conversationMetadata
///
- (KMConversationBuilder * _Nonnull)withMetaData:(NSDictionary * _Nonnull)conversationMetadata;
/// If conversationTitle is set then by default isUseOriginalTitle will be true.
/// \param isUseOriginalTitle isUseOriginalTitle
///
- (KMConversationBuilder * _Nonnull)useOriginalTitle:(BOOL)isUseOriginalTitle;
/// To set the conversation assignee, pass Agent ID or Bot Id.
/// \param conversationAssignee Pass AgentId or botId
///
- (KMConversationBuilder * _Nonnull)withConversationAssignee:(NSString * _Nonnull)conversationAssignee;
/// To set default conversation assignee, pass Agent ID or Bot Id.
/// \param defaultConversationAssignee Pass AgentId or botId
///
- (KMConversationBuilder * _Nonnull)withDefaultConversationAssignee:(NSString * _Nonnull)defaultConversationAssignee;
/// To assign the conversation to a team, pass a team Id.
/// \param teamId Pass a team ID
///
- (KMConversationBuilder * _Nonnull)withTeamId:(NSString * _Nonnull)teamId;
/// Finally call the build method on the KMConversationBuilder to build the KMConversation
- (KMConversation * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11Kommunicate32KMConversationListViewController")
@interface KMConversationListViewController : ALKBaseViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
@end

@class NSMutableArray;

@interface KMConversationListViewController (SWIFT_EXTENSION(Kommunicate)) <ALMessagesDelegate>
- (void)getMessagesArray:(NSMutableArray * _Null_unspecified)messagesArray;
- (void)updateMessageList:(NSMutableArray * _Null_unspecified)messagesArray;
@end


@class UISearchBar;

@interface KMConversationListViewController (SWIFT_EXTENSION(Kommunicate)) <UISearchBarDelegate>
- (void)searchBarSearchButtonClicked:(UISearchBar * _Nonnull)searchBar;
- (void)searchBar:(UISearchBar * _Nonnull)_ textDidChange:(NSString * _Nonnull)searchText;
- (void)searchBarCancelButtonClicked:(UISearchBar * _Nonnull)_;
@end


@class ALMessage;
@class ALUserDetail;

@interface KMConversationListViewController (SWIFT_EXTENSION(Kommunicate)) <ALMQTTConversationDelegate>
- (void)mqttDidConnected;
- (void)userOnlineStatusChanged:(NSString * _Null_unspecified)contactId status:(NSString * _Null_unspecified)status;
- (void)updateUserDetail:(NSString * _Null_unspecified)userId;
- (void)syncCall:(ALMessage * _Null_unspecified)alMessage andMessageList:(NSMutableArray * _Null_unspecified)_;
- (void)delivered:(NSString * _Null_unspecified)messageKey contactId:(NSString * _Null_unspecified)contactId withStatus:(int32_t)status;
- (void)updateStatusForContact:(NSString * _Null_unspecified)contactId withStatus:(int32_t)status;
- (void)updateTypingStatus:(NSString * _Null_unspecified)_ userId:(NSString * _Null_unspecified)userId status:(BOOL)status;
- (void)reloadDataForUserBlockNotification:(NSString * _Null_unspecified)userId andBlockFlag:(BOOL)_;
- (void)updateLastSeenAtStatus:(ALUserDetail * _Null_unspecified)alUserDetail;
- (void)mqttConnectionClosed;
@end

@class NSNotification;

/// Before pushing this view Controller. Use this
/// navigationItem.backBarButtonItem = UIBarButtonItem(customView: UIView())
SWIFT_CLASS("_TtC11Kommunicate28KMConversationViewController")
@interface KMConversationViewController : ALKConversationViewController
- (void)viewWillAppear:(BOOL)animated;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)animated;
- (void)newMessagesAdded;
- (void)pushNotificationWithNotification:(NSNotification * _Nonnull)notification;
- (void)loadingFinishedWithError:(NSError * _Nullable)_;
- (void)showFeedback;
@end






SWIFT_CLASS("_TtC11Kommunicate11KMGroupUser")
@interface KMGroupUser : ALGroupUser
- (null_unspecified instancetype)initWithDictonary:(NSDictionary * _Null_unspecified)messageDictonary OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithJSONString:(NSString * _Null_unspecified)JSONString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11Kommunicate9KMMessage")
@interface KMMessage : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC11Kommunicate16KMMessageBuilder")
@interface KMMessageBuilder : NSObject
- (KMMessageBuilder * _Nonnull)withConversationId:(NSString * _Nonnull)conversationId;
- (KMMessageBuilder * _Nonnull)withText:(NSString * _Nonnull)text;
- (KMMessageBuilder * _Nonnull)withMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
- (KMMessage * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11Kommunicate27KMPreChatFormViewController")
@interface KMPreChatFormViewController : UIViewController
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface KMPreChatFormViewController (SWIFT_EXTENSION(Kommunicate)) <UITextFieldDelegate>
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@class ALUser;
@class ALRegistrationResponse;
@class NSError;
@class UIView;

SWIFT_CLASS("_TtC11Kommunicate11Kommunicate")
@interface Kommunicate : NSObject
/// Returns true if user is already logged in.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLoggedIn;)
+ (BOOL)isLoggedIn SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Setup an App ID. It will be used for all Kommunicate related requests.
/// note:
/// If the App ID is modified then make sure to log out and log in.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     applicationId: App ID that needs to be set up.
///   </li>
/// </ul>
+ (void)setupWithApplicationId:(NSString * _Nonnull)applicationId;
/// Registers a new user, if it’s already registered then user will be logged in.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     kmUser: A KMUser object which contains user details.
///   </li>
///   <li>
///     completion: The callback with registration response and error.
///   </li>
/// </ul>
+ (void)registerUser:(ALUser * _Nonnull)kmUser completion:(void (^ _Nonnull)(ALRegistrationResponse * _Nullable, NSError * _Nullable))completion;
+ (void)registerUserAsVistor:(ALUser * _Nonnull)kmUser completion:(void (^ _Nonnull)(ALRegistrationResponse * _Nullable, NSError * _Nullable))completion;
+ (ALUser * _Nonnull)createVisitorUser SWIFT_WARN_UNUSED_RESULT;
/// This method is used to return an instance of conversation list view controller.
///
/// returns:
/// Instance of <code>ALKConversationListViewController</code>
+ (KMConversationListViewController * _Nonnull)conversationListViewController SWIFT_WARN_UNUSED_RESULT;
/// Launch chat list from a ViewController.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: ViewController from which the chat list will be launched.
///   </li>
/// </ul>
+ (void)showConversationsFrom:(UIViewController * _Nonnull)viewController;
/// Launch chat list inside a container..
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: ViewController from which the chat list  will be added as child vc
///   </li>
///   <li>
///     rootView: view container where chat will be loaded.
///   </li>
/// </ul>
+ (void)embedConversationListFrom:(UIViewController * _Nonnull)viewController on:(UIView * _Nonnull)rootView;
/// Close the Conversation Screen
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: ViewController from where ConversationVC  presented
///   </li>
/// </ul>
+ (void)closeConversationVCFrom:(UIViewController * _Nonnull)viewController;
/// Launch group chat from a ViewController
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     clientGroupId: clientChannelKey of the Group.
///   </li>
///   <li>
///     viewController: ViewController from which the group chat will be launched.
///   </li>
///   <li>
///     prefilledMessage: Prefilled message for chatbox.
///   </li>
///   <li>
///     showListOnBack: If true, then the conversation list will be shown on tap of the back button,
///   </li>
///   <li>
///     completionHandler: Called with the information whether the conversation was
///     shown or not.
///   </li>
/// </ul>
+ (void)showConversationWithGroupId:(NSString * _Nonnull)clientGroupId from:(UIViewController * _Nonnull)viewController prefilledMessage:(NSString * _Nullable)prefilledMessage showListOnBack:(BOOL)showListOnBack completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Launch group chat in a container
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     rootView: UIView in which Conversation needs to be loaded
///   </li>
///   <li>
///     clientGroupId: clientChannelKey of the Group.
///   </li>
///   <li>
///     viewController: ViewController from which the group chat will be launched.
///   </li>
///   <li>
///     prefilledMessage: Prefilled message for chatbox.
///   </li>
///   <li>
///     showListOnBack: If true, then the conversation list will be shown on tap of the back button,
///   </li>
///   <li>
///     completionHandler: Called with the information whether the conversation was
///     shown or not.
///   </li>
/// </ul>
+ (void)showConversationInRootView:(UIView * _Nonnull)rootView groupId:(NSString * _Nonnull)clientGroupId from:(UIViewController * _Nonnull)viewController prefilledMessage:(NSString * _Nullable)prefilledMessage showListOnBack:(BOOL)showListOnBack completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Generates a random id that can be used as an <code>userId</code>
/// when you don’t have any user information that can be used as an
/// userId.
///
/// returns:
/// A random alphanumeric string of length 32.
+ (NSString * _Nonnull)randomId SWIFT_WARN_UNUSED_RESULT;
/// Fetches appsettings configuration and get the disable chat widget config.
/// \param completion returns disablechatwidget configuration value
///
+ (void)isChatWidgetDisabledWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Logs out the current logged in user and clears all the cache.
+ (void)logoutUser SWIFT_DEPRECATED_MSG("Use logoutUser(completion:)");
/// Creates a new conversation with the details passed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: User id of the participant.
///   </li>
///   <li>
///     agentId: User id of the agent.
///   </li>
///   <li>
///     botIds: A list of bot ids to be added in the conversation.
///   </li>
///   <li>
///     useLastConversation: If there is a conversation already present then that will be returned.
///   </li>
/// </ul>
///
/// returns:
/// Group id if successful otherwise nil.
+ (void)createConversationWithUserId:(NSString * _Nonnull)_ agentIds:(NSArray<NSString *> * _Nonnull)agentIds botIds:(NSArray<NSString *> * _Nullable)botIds useLastConversation:(BOOL)useLastConversation clientConversationId:(NSString * _Nullable)_ completion:(void (^ _Nonnull)(NSString * _Nonnull))completion SWIFT_DEPRECATED_MSG("Use createConversation(conversation:completion:)");
@end
















#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
